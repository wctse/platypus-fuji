// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AssetAdded extends ethereum.Event {
  get params(): AssetAdded__Params {
    return new AssetAdded__Params(this);
  }
}

export class AssetAdded__Params {
  _event: AssetAdded;

  constructor(event: AssetAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class DevUpdated extends ethereum.Event {
  get params(): DevUpdated__Params {
    return new DevUpdated__Params(this);
  }
}

export class DevUpdated__Params {
  _event: DevUpdated;

  constructor(event: DevUpdated) {
    this._event = event;
  }

  get previousDev(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDev(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OracleUpdated extends ethereum.Event {
  get params(): OracleUpdated__Params {
    return new OracleUpdated__Params(this);
  }
}

export class OracleUpdated__Params {
  _event: OracleUpdated;

  constructor(event: OracleUpdated) {
    this._event = event;
  }

  get previousOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PriceDeviationUpdated extends ethereum.Event {
  get params(): PriceDeviationUpdated__Params {
    return new PriceDeviationUpdated__Params(this);
  }
}

export class PriceDeviationUpdated__Params {
  _event: PriceDeviationUpdated;

  constructor(event: PriceDeviationUpdated) {
    this._event = event;
  }

  get previousPriceDeviation(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPriceDeviation(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Platypus__quotePotentialSwapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Platypus__quotePotentialWithdrawResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class Platypus__quotePotentialWithdrawFromOtherAssetResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Platypus__swapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Platypus extends ethereum.SmartContract {
  static bind(address: Address): Platypus {
    return new Platypus("Platypus", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetOf(token: Address): Address {
    let result = super.call("assetOf", "assetOf(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toAddress();
  }

  try_assetOf(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("assetOf", "assetOf(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposit(
    token: Address,
    amount: BigInt,
    to: Address,
    deadline: BigInt
  ): BigInt {
    let result = super.call(
      "deposit",
      "deposit(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_deposit(
    token: Address,
    amount: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getC1(): BigInt {
    let result = super.call("getC1", "getC1():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getC1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getC1", "getC1():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDev(): Address {
    let result = super.call("getDev", "getDev():(address)", []);

    return result[0].toAddress();
  }

  try_getDev(): ethereum.CallResult<Address> {
    let result = super.tryCall("getDev", "getDev():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHaircutRate(): BigInt {
    let result = super.call("getHaircutRate", "getHaircutRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getHaircutRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHaircutRate",
      "getHaircutRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxPriceDeviation(): BigInt {
    let result = super.call(
      "getMaxPriceDeviation",
      "getMaxPriceDeviation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxPriceDeviation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxPriceDeviation",
      "getMaxPriceDeviation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceOracle(): Address {
    let result = super.call("getPriceOracle", "getPriceOracle():(address)", []);

    return result[0].toAddress();
  }

  try_getPriceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPriceOracle",
      "getPriceOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRetentionRatio(): BigInt {
    let result = super.call(
      "getRetentionRatio",
      "getRetentionRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRetentionRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRetentionRatio",
      "getRetentionRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSlippageParamK(): BigInt {
    let result = super.call(
      "getSlippageParamK",
      "getSlippageParamK():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSlippageParamK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSlippageParamK",
      "getSlippageParamK():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSlippageParamN(): BigInt {
    let result = super.call(
      "getSlippageParamN",
      "getSlippageParamN():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSlippageParamN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSlippageParamN",
      "getSlippageParamN():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenAddresses(): Array<Address> {
    let result = super.call(
      "getTokenAddresses",
      "getTokenAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getTokenAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTokenAddresses",
      "getTokenAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getWETH(): Address {
    let result = super.call("getWETH", "getWETH():(address)", []);

    return result[0].toAddress();
  }

  try_getWETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("getWETH", "getWETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWETHForwarder(): Address {
    let result = super.call(
      "getWETHForwarder",
      "getWETHForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getWETHForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWETHForwarder",
      "getWETHForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getXThreshold(): BigInt {
    let result = super.call("getXThreshold", "getXThreshold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getXThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getXThreshold",
      "getXThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  quotePotentialSwap(
    fromToken: Address,
    toToken: Address,
    fromAmount: BigInt
  ): Platypus__quotePotentialSwapResult {
    let result = super.call(
      "quotePotentialSwap",
      "quotePotentialSwap(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(toToken),
        ethereum.Value.fromUnsignedBigInt(fromAmount)
      ]
    );

    return new Platypus__quotePotentialSwapResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_quotePotentialSwap(
    fromToken: Address,
    toToken: Address,
    fromAmount: BigInt
  ): ethereum.CallResult<Platypus__quotePotentialSwapResult> {
    let result = super.tryCall(
      "quotePotentialSwap",
      "quotePotentialSwap(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(toToken),
        ethereum.Value.fromUnsignedBigInt(fromAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Platypus__quotePotentialSwapResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  quotePotentialWithdraw(
    token: Address,
    liquidity: BigInt
  ): Platypus__quotePotentialWithdrawResult {
    let result = super.call(
      "quotePotentialWithdraw",
      "quotePotentialWithdraw(address,uint256):(uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );

    return new Platypus__quotePotentialWithdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_quotePotentialWithdraw(
    token: Address,
    liquidity: BigInt
  ): ethereum.CallResult<Platypus__quotePotentialWithdrawResult> {
    let result = super.tryCall(
      "quotePotentialWithdraw",
      "quotePotentialWithdraw(address,uint256):(uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Platypus__quotePotentialWithdrawResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  quotePotentialWithdrawFromOtherAsset(
    initialToken: Address,
    wantedToken: Address,
    liquidity: BigInt
  ): Platypus__quotePotentialWithdrawFromOtherAssetResult {
    let result = super.call(
      "quotePotentialWithdrawFromOtherAsset",
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(initialToken),
        ethereum.Value.fromAddress(wantedToken),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );

    return new Platypus__quotePotentialWithdrawFromOtherAssetResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_quotePotentialWithdrawFromOtherAsset(
    initialToken: Address,
    wantedToken: Address,
    liquidity: BigInt
  ): ethereum.CallResult<Platypus__quotePotentialWithdrawFromOtherAssetResult> {
    let result = super.tryCall(
      "quotePotentialWithdrawFromOtherAsset",
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(initialToken),
        ethereum.Value.fromAddress(wantedToken),
        ethereum.Value.fromUnsignedBigInt(liquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Platypus__quotePotentialWithdrawFromOtherAssetResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swap(
    fromToken: Address,
    toToken: Address,
    fromAmount: BigInt,
    minimumToAmount: BigInt,
    to: Address,
    deadline: BigInt
  ): Platypus__swapResult {
    let result = super.call(
      "swap",
      "swap(address,address,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(toToken),
        ethereum.Value.fromUnsignedBigInt(fromAmount),
        ethereum.Value.fromUnsignedBigInt(minimumToAmount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new Platypus__swapResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_swap(
    fromToken: Address,
    toToken: Address,
    fromAmount: BigInt,
    minimumToAmount: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Platypus__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap(address,address,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(toToken),
        ethereum.Value.fromUnsignedBigInt(fromAmount),
        ethereum.Value.fromUnsignedBigInt(minimumToAmount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Platypus__swapResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  withdraw(
    token: Address,
    liquidity: BigInt,
    minimumAmount: BigInt,
    to: Address,
    deadline: BigInt
  ): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(minimumAmount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    token: Address,
    liquidity: BigInt,
    minimumAmount: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(minimumAmount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFromOtherAsset(
    initialToken: Address,
    wantedToken: Address,
    liquidity: BigInt,
    minimumAmount: BigInt,
    to: Address,
    deadline: BigInt
  ): BigInt {
    let result = super.call(
      "withdrawFromOtherAsset",
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(initialToken),
        ethereum.Value.fromAddress(wantedToken),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(minimumAmount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawFromOtherAsset(
    initialToken: Address,
    wantedToken: Address,
    liquidity: BigInt,
    minimumAmount: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFromOtherAsset",
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(initialToken),
        ethereum.Value.fromAddress(wantedToken),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(minimumAmount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AdminCall extends ethereum.Call {
  get inputs(): AdminCall__Inputs {
    return new AdminCall__Inputs(this);
  }

  get outputs(): AdminCall__Outputs {
    return new AdminCall__Outputs(this);
  }
}

export class AdminCall__Inputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }
}

export class AdminCall__Outputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ImplementationCall extends ethereum.Call {
  get inputs(): ImplementationCall__Inputs {
    return new ImplementationCall__Inputs(this);
  }

  get outputs(): ImplementationCall__Outputs {
    return new ImplementationCall__Outputs(this);
  }
}

export class ImplementationCall__Inputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }
}

export class ImplementationCall__Outputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class AddAssetCall extends ethereum.Call {
  get inputs(): AddAssetCall__Inputs {
    return new AddAssetCall__Inputs(this);
  }

  get outputs(): AddAssetCall__Outputs {
    return new AddAssetCall__Outputs(this);
  }
}

export class AddAssetCall__Inputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddAssetCall__Outputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get weth_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveAssetCall extends ethereum.Call {
  get inputs(): RemoveAssetCall__Inputs {
    return new RemoveAssetCall__Inputs(this);
  }

  get outputs(): RemoveAssetCall__Outputs {
    return new RemoveAssetCall__Outputs(this);
  }
}

export class RemoveAssetCall__Inputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }

  get key(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAssetCall__Outputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetC1Call extends ethereum.Call {
  get inputs(): SetC1Call__Inputs {
    return new SetC1Call__Inputs(this);
  }

  get outputs(): SetC1Call__Outputs {
    return new SetC1Call__Outputs(this);
  }
}

export class SetC1Call__Inputs {
  _call: SetC1Call;

  constructor(call: SetC1Call) {
    this._call = call;
  }

  get c1_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetC1Call__Outputs {
  _call: SetC1Call;

  constructor(call: SetC1Call) {
    this._call = call;
  }
}

export class SetDevCall extends ethereum.Call {
  get inputs(): SetDevCall__Inputs {
    return new SetDevCall__Inputs(this);
  }

  get outputs(): SetDevCall__Outputs {
    return new SetDevCall__Outputs(this);
  }
}

export class SetDevCall__Inputs {
  _call: SetDevCall;

  constructor(call: SetDevCall) {
    this._call = call;
  }

  get dev(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDevCall__Outputs {
  _call: SetDevCall;

  constructor(call: SetDevCall) {
    this._call = call;
  }
}

export class SetHaircutRateCall extends ethereum.Call {
  get inputs(): SetHaircutRateCall__Inputs {
    return new SetHaircutRateCall__Inputs(this);
  }

  get outputs(): SetHaircutRateCall__Outputs {
    return new SetHaircutRateCall__Outputs(this);
  }
}

export class SetHaircutRateCall__Inputs {
  _call: SetHaircutRateCall;

  constructor(call: SetHaircutRateCall) {
    this._call = call;
  }

  get haircutRate_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetHaircutRateCall__Outputs {
  _call: SetHaircutRateCall;

  constructor(call: SetHaircutRateCall) {
    this._call = call;
  }
}

export class SetMaxPriceDeviationCall extends ethereum.Call {
  get inputs(): SetMaxPriceDeviationCall__Inputs {
    return new SetMaxPriceDeviationCall__Inputs(this);
  }

  get outputs(): SetMaxPriceDeviationCall__Outputs {
    return new SetMaxPriceDeviationCall__Outputs(this);
  }
}

export class SetMaxPriceDeviationCall__Inputs {
  _call: SetMaxPriceDeviationCall;

  constructor(call: SetMaxPriceDeviationCall) {
    this._call = call;
  }

  get maxPriceDeviation_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxPriceDeviationCall__Outputs {
  _call: SetMaxPriceDeviationCall;

  constructor(call: SetMaxPriceDeviationCall) {
    this._call = call;
  }
}

export class SetPriceOracleCall extends ethereum.Call {
  get inputs(): SetPriceOracleCall__Inputs {
    return new SetPriceOracleCall__Inputs(this);
  }

  get outputs(): SetPriceOracleCall__Outputs {
    return new SetPriceOracleCall__Outputs(this);
  }
}

export class SetPriceOracleCall__Inputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }

  get priceOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPriceOracleCall__Outputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }
}

export class SetRetentionRatioCall extends ethereum.Call {
  get inputs(): SetRetentionRatioCall__Inputs {
    return new SetRetentionRatioCall__Inputs(this);
  }

  get outputs(): SetRetentionRatioCall__Outputs {
    return new SetRetentionRatioCall__Outputs(this);
  }
}

export class SetRetentionRatioCall__Inputs {
  _call: SetRetentionRatioCall;

  constructor(call: SetRetentionRatioCall) {
    this._call = call;
  }

  get retentionRatio_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRetentionRatioCall__Outputs {
  _call: SetRetentionRatioCall;

  constructor(call: SetRetentionRatioCall) {
    this._call = call;
  }
}

export class SetSlippageParamKCall extends ethereum.Call {
  get inputs(): SetSlippageParamKCall__Inputs {
    return new SetSlippageParamKCall__Inputs(this);
  }

  get outputs(): SetSlippageParamKCall__Outputs {
    return new SetSlippageParamKCall__Outputs(this);
  }
}

export class SetSlippageParamKCall__Inputs {
  _call: SetSlippageParamKCall;

  constructor(call: SetSlippageParamKCall) {
    this._call = call;
  }

  get k_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSlippageParamKCall__Outputs {
  _call: SetSlippageParamKCall;

  constructor(call: SetSlippageParamKCall) {
    this._call = call;
  }
}

export class SetSlippageParamNCall extends ethereum.Call {
  get inputs(): SetSlippageParamNCall__Inputs {
    return new SetSlippageParamNCall__Inputs(this);
  }

  get outputs(): SetSlippageParamNCall__Outputs {
    return new SetSlippageParamNCall__Outputs(this);
  }
}

export class SetSlippageParamNCall__Inputs {
  _call: SetSlippageParamNCall;

  constructor(call: SetSlippageParamNCall) {
    this._call = call;
  }

  get n_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSlippageParamNCall__Outputs {
  _call: SetSlippageParamNCall;

  constructor(call: SetSlippageParamNCall) {
    this._call = call;
  }
}

export class SetWETHCall extends ethereum.Call {
  get inputs(): SetWETHCall__Inputs {
    return new SetWETHCall__Inputs(this);
  }

  get outputs(): SetWETHCall__Outputs {
    return new SetWETHCall__Outputs(this);
  }
}

export class SetWETHCall__Inputs {
  _call: SetWETHCall;

  constructor(call: SetWETHCall) {
    this._call = call;
  }

  get weth_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWETHCall__Outputs {
  _call: SetWETHCall;

  constructor(call: SetWETHCall) {
    this._call = call;
  }
}

export class SetWETHForwarderCall extends ethereum.Call {
  get inputs(): SetWETHForwarderCall__Inputs {
    return new SetWETHForwarderCall__Inputs(this);
  }

  get outputs(): SetWETHForwarderCall__Outputs {
    return new SetWETHForwarderCall__Outputs(this);
  }
}

export class SetWETHForwarderCall__Inputs {
  _call: SetWETHForwarderCall;

  constructor(call: SetWETHForwarderCall) {
    this._call = call;
  }

  get wethForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWETHForwarderCall__Outputs {
  _call: SetWETHForwarderCall;

  constructor(call: SetWETHForwarderCall) {
    this._call = call;
  }
}

export class SetXThresholdCall extends ethereum.Call {
  get inputs(): SetXThresholdCall__Inputs {
    return new SetXThresholdCall__Inputs(this);
  }

  get outputs(): SetXThresholdCall__Outputs {
    return new SetXThresholdCall__Outputs(this);
  }
}

export class SetXThresholdCall__Inputs {
  _call: SetXThresholdCall;

  constructor(call: SetXThresholdCall) {
    this._call = call;
  }

  get xThreshold_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetXThresholdCall__Outputs {
  _call: SetXThresholdCall;

  constructor(call: SetXThresholdCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fromAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minimumToAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get actualToAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get haircut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minimumAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawFromOtherAssetCall extends ethereum.Call {
  get inputs(): WithdrawFromOtherAssetCall__Inputs {
    return new WithdrawFromOtherAssetCall__Inputs(this);
  }

  get outputs(): WithdrawFromOtherAssetCall__Outputs {
    return new WithdrawFromOtherAssetCall__Outputs(this);
  }
}

export class WithdrawFromOtherAssetCall__Inputs {
  _call: WithdrawFromOtherAssetCall;

  constructor(call: WithdrawFromOtherAssetCall) {
    this._call = call;
  }

  get initialToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get wantedToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minimumAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class WithdrawFromOtherAssetCall__Outputs {
  _call: WithdrawFromOtherAssetCall;

  constructor(call: WithdrawFromOtherAssetCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialAdmin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
